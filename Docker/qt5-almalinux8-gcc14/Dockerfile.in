ARG VERSION=latest
FROM dockbuild/almalinux8-devtoolset14-gcc14:${VERSION}

LABEL maintainer="3D Slicer Community <slicer-devel@bwh.harvard.edu>"

ENV DISPLAY=:99
ENV MESA_GL_VERSION_OVERRIDE=3.2

ARG QT_ACCOUNT_LOGIN
ARG QT_ACCOUNT_PASSWORD

RUN \
  #
  # Qt dependencies:
  #
  # * https://doc.qt.io/qt-5/linux-requirements.html
  # * https://doc.qt.io/qt-5/supported-platforms-and-configurations.html
  #
  # IMPORTANT:
  #
  # * dependencies of Qt5MultimediaGstTools are not installed. These are
  #   "gstreamer1-plugins-good" and "gstreamer1-plugins-base" along with
  #   all video and image codecs.
  #
  dnf install -y \
    flex \
    fontconfig \
    freetype \
    glib2 \
    libICE \
    libX11 \
    libxcb \
    libXext \
    libXi \
    libXrender \
    libSM \
    libxkbcommon-x11 \
    libXt-devel \
    mesa-libOSMesa-devel \
    mesa-libGL-devel \
    mesa-libGLU-devel \
    xcb-util-keysyms \
    xcb-util-image \
    xcb-util-wm \
    xcb-util-renderutil \
  && \
  # Dependencies of Xvfb GLX environment
  dnf install -y \
    xorg-x11-server-Xvfb \
    xorg-x11-server-Xorg \
    mesa-dri-drivers \
    glx-utils \
  && \
  #
  # libQt5WebEngineCore
  # * alsa-lib provides libasound.so.2
  # * nss provides libsmime3.so
  dnf install -y \
    alsa-lib \
    libXcomposite \
    libXcursor \
    libXrandr \
    libXtst \
    nss \
    mesa-libEGL \
  && \
  #
  # libQt5Multimedia
  # * pulseaudio-libs-glib2 provides libpulse-mainloop-glib.so.0
  # * pulseaudio-libs provides libpulse.so.0
  #
  dnf install -y \
    pulseaudio-libs \
    pulseaudio-libs-glib2 \
  && \
  #
  # Slicer dependencies
  #
  dnf install -y \
    subversion \
  && \
  #
  # SlicerJupyter dependencies
  #
  dnf install -y \
    libuuid-devel \
  && \
  #
  # SlicerIMSTK dependencies
  #
  dnf install -y \
    libusbx-devel \
  && \
  #
  # Download and install Qt: new Qt installer 4.0 CLI interface
  #
  cd /usr/src && \
  INSTALLER=qt-online-installer-linux-x64-online.run && \
  curl -LO https://download.qt.io/official_releases/online_installers/${INSTALLER} && \
  chmod u+x ${INSTALLER} && \
  # See CLI parameters here: https://wiki.qt.io/Online_Installer_4.x
  ./${INSTALLER} \
    install \
      qt.qt5.5152.gcc_64 \
      qt.qt5.5152.qtscript \
      qt.qt5.5152.qtscript.gcc_64 \
      qt.qt5.5152.qtwebengine \
      qt.qt5.5152.qtwebengine.gcc_64\
    --root /opt/qt \
    --email ${QT_ACCOUNT_LOGIN} \
    --pw ${QT_ACCOUNT_PASSWORD} \
    --verbose \
    --platform minimal \
    --accept-licenses \
    --accept-obligations \
    --confirm-command \
    --auto-answer telemetry-question=No,AssociateCommonFiletypes=No,installationErrorWithCancel=Ignore,OverwriteTargetDirectory=No &&\
  rm -f qt-unified-linux-x64-online.run && \
  # Cleanup
  #
  find /opt/qt -maxdepth 1 -type f -exec rm -rf "{}" \; && \
  find /opt/qt -type f -name "*.debug" -delete && \
  find /opt/qt/5.15.2/gcc_64/bin -type f -executable -exec strip {} \; && \
  rm -rf \
    /opt/qt/dist \
    /opt/qt/Docs \
    /opt/qt/Examples \
    /opt/qt/Tools \
  && \
  #
  # Cleanup
  #
  dnf clean all && \
  rm -rf /var/cache/dnf

#
# (1) Add Qt root directory to the PATH. This allows CMake command
#     'find_package(Qt5 REQUIRED)` to succeed.
#
# (2) Set env. variable Qt5_DIR to support configuring project
#     by explicitly passing -DQt5_DIR:PATH=${Qt5_DIR}
#
ENV PATH=/opt/qt/5.15.2/gcc_64/:${PATH} \
    Qt5_DIR=/opt/qt/5.15.2/gcc_64/lib/cmake/Qt5

#Copy in new entrypoint
COPY entrypoint.sh /dockcross/

#include "common.label-and-env"
